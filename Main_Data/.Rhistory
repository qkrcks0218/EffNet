SC.Pri.M.10 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==10)
SC.Pri.M.11 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==11)
SC.Pri.F.06 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==06)
SC.Pri.F.07 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==07)
SC.Pri.F.08 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==08)
SC.Pri.F.09 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==09)
SC.Pri.F.10 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==10)
SC.Pri.F.11 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==11)
Suba.Pub.M.09 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==09)
Suba.Pub.M.10 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==10)
Suba.Pub.M.11 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==11)
Suba.Pub.F.09 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==09)
Suba.Pub.F.10 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==10)
Suba.Pub.F.11 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==11)
Suba.Pri.M.09 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==09)
Suba.Pri.M.10 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==10)
Suba.Pri.M.11 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==11)
Suba.Pri.F.09 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==09)
Suba.Pri.F.10 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==10)
Suba.Pri.F.11 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==11)
Randomization <- cbind(SC.Pub.M.06,SC.Pub.M.07,SC.Pub.M.08,SC.Pub.M.09,SC.Pub.M.10,SC.Pub.M.11,
SC.Pub.F.06,SC.Pub.F.07,SC.Pub.F.08,SC.Pub.F.09,SC.Pub.F.10,SC.Pub.F.11,
SC.Pri.M.06,SC.Pri.M.07,SC.Pri.M.08,SC.Pri.M.09,SC.Pri.M.10,SC.Pri.M.11,
SC.Pri.F.06,SC.Pri.F.07,SC.Pri.F.08,SC.Pri.F.09,SC.Pri.F.10,SC.Pri.F.11,
Suba.Pub.M.09,Suba.Pub.M.10,Suba.Pub.M.11,
Suba.Pub.F.09,Suba.Pub.F.10,Suba.Pub.F.11,
Suba.Pri.M.09,Suba.Pri.M.10,Suba.Pri.M.11,
Suba.Pri.F.09,Suba.Pri.F.10,Suba.Pri.F.11)
RP1 <- apply(Randomization*RawData$treatment,2,sum)
RP2 <- apply(Randomization,2,sum)
RP1 <- apply(Randomization*matrix(RP1,dim(Randomization)[1],dim(Randomization)[2],byrow=T),1,sum)
RP2 <- apply(Randomization*matrix(RP2,dim(Randomization)[1],dim(Randomization)[2],byrow=T),1,sum)
RawData <- cbind(RawData,Randomization,RP1,RP2)
################################
# Data Cleaning
################################
Data <- RawData[RawData$survey_selected==1&             # Students who enrolled in one of the 68 schools selected for surveying and verified attendance.
(SC.eligible+SUBA.eligible)==1,]    # and who were eligible for the lottery. 7,569 students.
################################
# Table
################################
Data.SUBA <- Data[Data$suba==1,]
Data.SC <- Data[Data$suba==0,]
################################
# Cluster ID (Household) Assignment
# Some cluster ID is missing and
# some students under the same cluster ID have different cluster-level variables.
# We remove clusters of which students report different cluster-level variables
################################
Cluster.cov.list <- c("s_edadhead",                     # Age of household head
"s_single",                       # Single parent household
"s_tpersona",                     # Number of people in household
"s_puntaje",                      # SISBEN score
"s_ingtotal",                     # Household income
"suba")                           # Location=Suba
Data <- Data[!is.na(Data$fu_nim_hogar),]                # Choose students with known cluster ID
Data <- Data[order(Data$fu_nim_hogar),]                 # Sort based on cluster ID
CID <- unique(Data$fu_nim_hogar)                        # Cluster ID
CX <- Data[,Cluster.cov.list]
valid <- rep(1,dim(Data)[1])
for(ii in 1:length(CID)){                               # valid = 0 if cluster-level variables are inconsistent across siblings
INDEX <- which(Data$fu_nim_hogar==CID[ii])
if( length(INDEX)>1&sum(apply(CX[INDEX,],2,var))>1 ){
valid[INDEX] <- 0
}
}
Data <- Data[valid==1,]                                 # Choose valid data
Data$fu_nim_hogar <-                                    # Re-assign cluster ID
rep(1:length(unique(Data$fu_nim_hogar)),table(Data$fu_nim_hogar))
Data$school_code <- as.numeric(Data$school_code==1)      # Private school
################################
# Covariate Selection
################################
RDN <- colnames(Data)[51:88]
Covariate.list <- c("s_age_sorteo",                     # Age
"grade",                            # Grade
"s_sexo",                           # Gender
"s_edadhead",                       # Age of household head
"s_single",                         # Single parent household
"s_tpersona",                       # Number of people in household
"s_puntaje",                        # SISBEN score
"s_ingtotal",                       # Household income
"suba",                             # Location=Suba
"fu_nim_hogar",                     # Household ID
RDN)                                # Randomization
# Data <- Data[,c("m_enrolled","treatment",               # Enrollment, Treatment
#                 Covariate.list)]
# Data <- Data[,c("at_msamean","treatment",               # Monitored attendance, Treatment
#                 Covariate.list)]
Data <- Data[,c("fu_self_attendance","treatment",               # Self attendance, Treatment
Covariate.list)]
Data <- Data[apply(is.na(Data),1,sum)==0,]              # Choose Observations that have full information.
Data <- Data[order(Data$fu_nim_hogar),]                 # Sort based on household ID
colnames(Data) <- c("Y","A",                            # Rename
paste("Ind.",c("Age","Grade","Gender"),sep=""),
paste("HH.",c("Age","FamilyType","NumPpl","SISBEN","Income","Loc","ID"),sep=""),
RDN)
M <- as.numeric( table( Data$HH.ID ) )
Data$M <- rep(M,M)                                      # Cluster size
write.csv(Data[,-c(13:50)],"Clean_Data_SelfAttendance.csv",row.names=FALSE)
write.csv(Data[,c(13:50)],"Clean_Data_SelfAttendance_Randomization.csv",row.names=FALSE)
################################
# Load Data
################################
Data <- read.csv("Clean_Data_SelfAttendance.csv")
################################
# Superlearner Hyperparameter Grids
################################
SL.hpara <- list()
SL.hpara$SLL <- 1 #:9
# Superlearner basic learning algorithms:
# 1: GLM
# 2: lasso/ridge
# 3: earth
# 4: GAM
# 5: xgboost
# 6: polynomial spline
# 7: random forest
# 8: gbm
# 9: 1-layer MLP
SL.hpara$MLPL <- c(2,4)                 # Hyperparameter for 9: 1-layer MLP
SL.hpara$MLPdecay <- 10^c(-1,-3,-5)     # Hyperparameter for 9: 1-layer MLP
SL.hpara$MTRY <- c(3,6)                 # Hyperparameter for 7: random forest
ORtype <- gaussian()                    # Specify continuous outcome
################################
# Type Definition: Product of M * Location
################################
TypeD <- list()
TypeD[[1]] <- Data[Data$M==1&Data$HH.Loc==0,]                   # Size 1 & San Cristobal
TypeD[[2]] <- Data[Data$M==1&Data$HH.Loc==1,]                   # Size 1 & Suba
TypeD[[3]] <- Data[Data$M==2&Data$HH.Loc==0,]                   # Size 2 & San Cristobal
TypeD[[4]] <- Data[Data$M==2&Data$HH.Loc==1,]                   # Size 2 & Suba
TypeD[[5]] <- Data[Data$M>=3&Data$HH.Loc==0,]                   # Size>=3& San Cristobal
TypeD[[6]] <- Data[Data$M>=3&Data$HH.Loc==1,]                   # Size>=3& Suba
N <- M <- Index <- C <- list()
for(tt in 1:6){
C[[tt]] <- unique(TypeD[[tt]]$HH.ID)                              # Cluster list in tt-th type
N[[tt]] <- length(C[[tt]])                                        # Number of clusters
Index[[tt]] <- matrix(0, length(C[[tt]]), 2)                      # Index of each cluster
for(ii in 1:dim(Index[[tt]])[1]){
Index[[tt]][ii,1] <- min( which(TypeD[[tt]]$HH.ID==C[[tt]][ii]) )
Index[[tt]][ii,2] <- max( which(TypeD[[tt]]$HH.ID==C[[tt]][ii]) )
}
M[[tt]] <- Index[[tt]][,2]-Index[[tt]][,1]+1                      # Cluster size
}
for(jj in 3:6){                                                 # Aggregate others' A and X
Others <- aggregate(.~HH.ID,data=TypeD[[jj]],FUN="sum")[,c(3:6,1,13)]
Others.Expand <- matrix(0,dim(TypeD[[jj]])[1],4)
for(ii in 1:dim(Others)[1]){
Others.Expand[Index[[jj]][ii,1]:Index[[jj]][ii,2],] <- matrix(as.numeric(Others[ii,1:4]),M[[jj]][ii],4,byrow=T)
}
Others.Summary <- as.matrix((Others.Expand - as.matrix(TypeD[[jj]][,c(2:5)]))/matrix(TypeD[[jj]]$M-1,dim(TypeD[[jj]])[1],4))
Others.Summary <- data.frame(Others.Summary)
colnames(Others.Summary) <- paste("Other.",c("A","Age","Grade","Gender"),sep="")
# Others.Summary$Other.A.Ego.A <- Others.Summary$Other.A*TypeD[[jj]]$A
TypeD[[jj]] <- cbind(TypeD[[jj]][,c(1:5)],Others.Summary,TypeD[[jj]][,c(6:13)])
}
for(jj in 1:2){ TypeD[[jj]] <- TypeD[[jj]][,-c(which(colnames(TypeD[[jj]])=="HH.Loc"),
which(colnames(TypeD[[jj]])=="M"))] }            # Remove Location, M
for(jj in 3:4){ TypeD[[jj]] <- TypeD[[jj]][,-c(which(colnames(TypeD[[jj]])=="HH.Loc"),
which(colnames(TypeD[[jj]])=="M"))] }            # Remove Location, M
for(jj in 5:6){ TypeD[[jj]] <- TypeD[[jj]][,-c(which(colnames(TypeD[[jj]])=="HH.Loc"))] }       # Remove Location
################################
# Propensity Score
################################
Randomization <- read.csv("Clean_Data_SelfAttendance_Randomization.csv")
TypeR <- list()
TypeR[[1]] <- Randomization[Data$M==1&Data$HH.Loc==0,]                   # Size 1 & San Cristobal
TypeR[[2]] <- Randomization[Data$M==1&Data$HH.Loc==1,]                   # Size 1 & Suba
TypeR[[3]] <- Randomization[Data$M==2&Data$HH.Loc==0,]                   # Size 2 & San Cristobal
TypeR[[4]] <- Randomization[Data$M==2&Data$HH.Loc==1,]                   # Size 2 & Suba
TypeR[[5]] <- Randomization[Data$M>=3&Data$HH.Loc==0,]                   # Size>=3& San Cristobal
TypeR[[6]] <- Randomization[Data$M>=3&Data$HH.Loc==1,]                   # Size>=3& Suba
PS <- list()
PS[[1]] <- (TypeR[[1]][,37]/TypeR[[1]][,38])^TypeD[[1]]$A*(1-TypeR[[1]][,37]/TypeR[[1]][,38])^(1-TypeD[[1]]$A)
PS[[2]] <- (TypeR[[2]][,37]/TypeR[[2]][,38])^TypeD[[2]]$A*(1-TypeR[[2]][,37]/TypeR[[2]][,38])^(1-TypeD[[2]]$A)
for(tt in 3:4){
PS[[tt]] <- rep(0,dim(TypeD[[tt]])[1])                         # Propensity score of observing treatment assignment vectors
for(ii in 1:dim(Index[[tt]])[1]){
A.temp <- TypeD[[tt]]$A[Index[[tt]][ii,1]:Index[[tt]][ii,2]]
R.temp <- TypeR[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2],]
if( sum(apply(R.temp,2,sum)[-c(37,38)]>1)==0 ){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- prod( (R.temp[,37]/R.temp[,38])^A.temp*(1-R.temp[,37]/R.temp[,38])^(1-A.temp) )
} else {
if(sum(A.temp)==2){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- (R.temp[1,37]*(R.temp[2,37]-1))/R.temp[1,38]/(R.temp[1,38]-1)
} else if (sum(A.temp)==1){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- (R.temp[1,37]*(R.temp[1,38]-R.temp[2,37]))/R.temp[1,38]/(R.temp[1,38]-1)
} else if (sum(A.temp)==0){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- (R.temp[1,38]-R.temp[1,37])*(R.temp[1,38]-R.temp[2,37]-1)/R.temp[1,38]/(R.temp[1,38]-1)
}
}
}
}
for(tt in 5){
PS[[tt]] <- rep(0,dim(TypeD[[tt]])[1])                         # Propensity score of observing treatment assignment vectors
for(ii in 1:dim(Index[[tt]])[1]){
A.temp <- TypeD[[tt]]$A[Index[[tt]][ii,1]:Index[[tt]][ii,2]]
R.temp <- TypeR[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2],]
if( sum(apply(R.temp,2,sum)[-c(37,38)]>1)==0 ){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- prod( (R.temp[,37]/R.temp[,38])^A.temp*(1-R.temp[,37]/R.temp[,38])^(1-A.temp) )
} else {
pos.2 <- which(R.temp[,which(apply(R.temp,2,sum)[-c(37,38)]==2)]==1)
pos.1 <- (1:length(A.temp))[-pos.2]
p1 <- prod( (R.temp[pos.1,37]/R.temp[pos.1,38])^A.temp[pos.1]*(1-R.temp[pos.1,37]/R.temp[pos.1,38])^(1-A.temp[pos.1]) )
A.temp <- A.temp[pos.2]
R.temp <- R.temp[pos.2,]
if(sum(A.temp)==2){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- p1*(R.temp[1,37]*(R.temp[2,37]-1))/R.temp[1,38]/(R.temp[1,38]-1)
} else if (sum(A.temp)==1){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- p1*(R.temp[1,37]*(R.temp[1,38]-R.temp[2,37]))/R.temp[1,38]/(R.temp[1,38]-1)
} else if (sum(A.temp)==0){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- p1*(R.temp[1,38]-R.temp[1,37])*(R.temp[1,38]-R.temp[2,37]-1)/R.temp[1,38]/(R.temp[1,38]-1)
}
}
}
}
for(tt in 6){
PS[[tt]] <- rep(0,dim(TypeD[[tt]])[1])                         # Propensity score of observing treatment assignment vectors
for(ii in 1:dim(Index[[tt]])[1]){
A.temp <- TypeD[[tt]]$A[Index[[tt]][ii,1]:Index[[tt]][ii,2]]
R.temp <- TypeR[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2],]
if( sum(apply(R.temp,2,sum)[-c(37,38)]>1)==0 ){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- prod( (R.temp[,37]/R.temp[,38])^A.temp*(1-R.temp[,37]/R.temp[,38])^(1-A.temp) )
} else {
print(c(tt,ii))
}
}
}
getwd()
############################################
# Last update : October 02 2021
# Code for the data analysis in Section 5
############################################
##################################################
# Load Packages and Functions
##################################################
library(readstata13)
library(SuperLearner)
library(caret)
library(nnet)
library(glmnet)
library(earth)
library(gam)
library(gbm)
library(xgboost)
library(kernlab)
library(polspline)
library(ranger)
source("MainFunction.R")
##################################################
# Data Preparation: Download the data from the link below
# https://www.openicpsr.org/openicpsr/project/113783/version/V1/view
##################################################
RawData <- read.dta13("Public_Data_AEJApp_2010-0132.dta")
################################
# Calculate Propensity Score
################################
SC <- as.numeric(RawData$suba==0)                       # Student in San Cristobal. These students were eligible for the lottery.
SC.eligible <- SC                                       # Eligible student in San Cristobal.
SUBA <- RawData$suba                                    # Student in Suba. Students under grade 9 were not eligible for the lottery.
SUBA.eligible <- SUBA * as.numeric(RawData$grade>=9)    # Eligible student in Suba.
Total.SC <- sum(SC.eligible)                            # 10,907. Agrees with  Barrera-Osorio et al. (2011)
Total.SUBA <- sum(SUBA.eligible)                        # 2,526. Agrees with  Barrera-Osorio et al. (2011)
Trt.SC <- sum(SC.eligible * RawData$treatment)          # 6,851. Total number of students received treatment in San Cristobal.
Trt.SUBA <- sum(SUBA.eligible * RawData$treatment)      # 1,133. Total number of students received treatment in San Cristobal.
# Strata used in the randomization
SC.Pub.M.06 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==06)
SC.Pub.M.07 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==07)
SC.Pub.M.08 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==08)
SC.Pub.M.09 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==09)
SC.Pub.M.10 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==10)
SC.Pub.M.11 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==11)
SC.Pub.F.06 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==06)
SC.Pub.F.07 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==07)
SC.Pub.F.08 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==08)
SC.Pub.F.09 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==09)
SC.Pub.F.10 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==10)
SC.Pub.F.11 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==11)
SC.Pri.M.06 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==06)
SC.Pri.M.07 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==07)
SC.Pri.M.08 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==08)
SC.Pri.M.09 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==09)
SC.Pri.M.10 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==10)
SC.Pri.M.11 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==11)
SC.Pri.F.06 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==06)
SC.Pri.F.07 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==07)
SC.Pri.F.08 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==08)
SC.Pri.F.09 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==09)
SC.Pri.F.10 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==10)
SC.Pri.F.11 <- as.numeric(RawData$suba==0 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==11)
Suba.Pub.M.09 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==09)
Suba.Pub.M.10 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==10)
Suba.Pub.M.11 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code >1 & RawData$grade==11)
Suba.Pub.F.09 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==09)
Suba.Pub.F.10 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==10)
Suba.Pub.F.11 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code >1 & RawData$grade==11)
Suba.Pri.M.09 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==09)
Suba.Pri.M.10 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==10)
Suba.Pri.M.11 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="M" & RawData$school_code==1 & RawData$grade==11)
Suba.Pri.F.09 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==09)
Suba.Pri.F.10 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==10)
Suba.Pri.F.11 <- as.numeric(RawData$suba==1 & RawData$r_be_gene=="F" & RawData$school_code==1 & RawData$grade==11)
Randomization <- cbind(SC.Pub.M.06,SC.Pub.M.07,SC.Pub.M.08,SC.Pub.M.09,SC.Pub.M.10,SC.Pub.M.11,
SC.Pub.F.06,SC.Pub.F.07,SC.Pub.F.08,SC.Pub.F.09,SC.Pub.F.10,SC.Pub.F.11,
SC.Pri.M.06,SC.Pri.M.07,SC.Pri.M.08,SC.Pri.M.09,SC.Pri.M.10,SC.Pri.M.11,
SC.Pri.F.06,SC.Pri.F.07,SC.Pri.F.08,SC.Pri.F.09,SC.Pri.F.10,SC.Pri.F.11,
Suba.Pub.M.09,Suba.Pub.M.10,Suba.Pub.M.11,
Suba.Pub.F.09,Suba.Pub.F.10,Suba.Pub.F.11,
Suba.Pri.M.09,Suba.Pri.M.10,Suba.Pri.M.11,
Suba.Pri.F.09,Suba.Pri.F.10,Suba.Pri.F.11)
RP1 <- apply(Randomization*RawData$treatment,2,sum)
RP2 <- apply(Randomization,2,sum)
RP1 <- apply(Randomization*matrix(RP1,dim(Randomization)[1],dim(Randomization)[2],byrow=T),1,sum)
RP2 <- apply(Randomization*matrix(RP2,dim(Randomization)[1],dim(Randomization)[2],byrow=T),1,sum)
RawData <- cbind(RawData,Randomization,RP1,RP2)
################################
# Data Cleaning
################################
Data <- RawData[RawData$survey_selected==1&             # Students who enrolled in one of the 68 schools selected for surveying and verified attendance.
(SC.eligible+SUBA.eligible)==1,]    # and who were eligible for the lottery. 7,569 students.
################################
# Table
################################
Data.SUBA <- Data[Data$suba==1,]
Data.SC <- Data[Data$suba==0,]
################################
# Cluster ID (Household) Assignment
# Some cluster ID is missing and
# some students under the same cluster ID have different cluster-level variables.
# We remove clusters of which students report different cluster-level variables
################################
Cluster.cov.list <- c("s_edadhead",                     # Age of household head
"s_single",                       # Single parent household
"s_tpersona",                     # Number of people in household
"s_puntaje",                      # SISBEN score
"s_ingtotal",                     # Household income
"suba")                           # Location=Suba
Data <- Data[!is.na(Data$fu_nim_hogar),]                # Choose students with known cluster ID
Data <- Data[order(Data$fu_nim_hogar),]                 # Sort based on cluster ID
CID <- unique(Data$fu_nim_hogar)                        # Cluster ID
CX <- Data[,Cluster.cov.list]
valid <- rep(1,dim(Data)[1])
for(ii in 1:length(CID)){                               # valid = 0 if cluster-level variables are inconsistent across siblings
INDEX <- which(Data$fu_nim_hogar==CID[ii])
if( length(INDEX)>1&sum(apply(CX[INDEX,],2,var))>1 ){
valid[INDEX] <- 0
}
}
Data <- Data[valid==1,]                                 # Choose valid data
Data$fu_nim_hogar <-                                    # Re-assign cluster ID
rep(1:length(unique(Data$fu_nim_hogar)),table(Data$fu_nim_hogar))
Data$school_code <- as.numeric(Data$school_code==1)      # Private school
################################
# Covariate Selection
################################
RDN <- colnames(Data)[51:88]
Covariate.list <- c("s_age_sorteo",                     # Age
"grade",                            # Grade
"s_sexo",                           # Gender
"s_edadhead",                       # Age of household head
"s_single",                         # Single parent household
"s_tpersona",                       # Number of people in household
"s_puntaje",                        # SISBEN score
"s_ingtotal",                       # Household income
"suba",                             # Location=Suba
"fu_nim_hogar",                     # Household ID
RDN)                                # Randomization
# Data <- Data[,c("m_enrolled","treatment",               # Enrollment, Treatment
#                 Covariate.list)]
# Data <- Data[,c("at_msamean","treatment",               # Monitored attendance, Treatment
#                 Covariate.list)]
Data <- Data[,c("fu_self_attendance","treatment",               # Self attendance, Treatment
Covariate.list)]
Data <- Data[apply(is.na(Data),1,sum)==0,]              # Choose Observations that have full information.
Data <- Data[order(Data$fu_nim_hogar),]                 # Sort based on household ID
colnames(Data) <- c("Y","A",                            # Rename
paste("Ind.",c("Age","Grade","Gender"),sep=""),
paste("HH.",c("Age","FamilyType","NumPpl","SISBEN","Income","Loc","ID"),sep=""),
RDN)
M <- as.numeric( table( Data$HH.ID ) )
Data$M <- rep(M,M)                                      # Cluster size
write.csv(Data[,-c(13:50)],"Clean_Data_SelfAttendance.csv",row.names=FALSE)
write.csv(Data[,c(13:50)],"Clean_Data_SelfAttendance_Randomization.csv",row.names=FALSE)
################################
# Load Data
################################
Data <- read.csv("Clean_Data_SelfAttendance.csv")
################################
# Superlearner Hyperparameter Grids
################################
SL.hpara <- list()
SL.hpara$SLL <- 1 #:9
# Superlearner basic learning algorithms:
# 1: GLM
# 2: lasso/ridge
# 3: earth
# 4: GAM
# 5: xgboost
# 6: polynomial spline
# 7: random forest
# 8: gbm
# 9: 1-layer MLP
SL.hpara$MLPL <- c(2,4)                 # Hyperparameter for 9: 1-layer MLP
SL.hpara$MLPdecay <- 10^c(-1,-3,-5)     # Hyperparameter for 9: 1-layer MLP
SL.hpara$MTRY <- c(3,6)                 # Hyperparameter for 7: random forest
ORtype <- gaussian()                    # Specify continuous outcome
################################
# Type Definition: Product of M * Location
################################
TypeD <- list()
TypeD[[1]] <- Data[Data$M==1&Data$HH.Loc==0,]                   # Size 1 & San Cristobal
TypeD[[2]] <- Data[Data$M==1&Data$HH.Loc==1,]                   # Size 1 & Suba
TypeD[[3]] <- Data[Data$M==2&Data$HH.Loc==0,]                   # Size 2 & San Cristobal
TypeD[[4]] <- Data[Data$M==2&Data$HH.Loc==1,]                   # Size 2 & Suba
TypeD[[5]] <- Data[Data$M>=3&Data$HH.Loc==0,]                   # Size>=3& San Cristobal
TypeD[[6]] <- Data[Data$M>=3&Data$HH.Loc==1,]                   # Size>=3& Suba
N <- M <- Index <- C <- list()
for(tt in 1:6){
C[[tt]] <- unique(TypeD[[tt]]$HH.ID)                              # Cluster list in tt-th type
N[[tt]] <- length(C[[tt]])                                        # Number of clusters
Index[[tt]] <- matrix(0, length(C[[tt]]), 2)                      # Index of each cluster
for(ii in 1:dim(Index[[tt]])[1]){
Index[[tt]][ii,1] <- min( which(TypeD[[tt]]$HH.ID==C[[tt]][ii]) )
Index[[tt]][ii,2] <- max( which(TypeD[[tt]]$HH.ID==C[[tt]][ii]) )
}
M[[tt]] <- Index[[tt]][,2]-Index[[tt]][,1]+1                      # Cluster size
}
for(jj in 3:6){                                                 # Aggregate others' A and X
Others <- aggregate(.~HH.ID,data=TypeD[[jj]],FUN="sum")[,c(3:6,1,13)]
Others.Expand <- matrix(0,dim(TypeD[[jj]])[1],4)
for(ii in 1:dim(Others)[1]){
Others.Expand[Index[[jj]][ii,1]:Index[[jj]][ii,2],] <- matrix(as.numeric(Others[ii,1:4]),M[[jj]][ii],4,byrow=T)
}
Others.Summary <- as.matrix((Others.Expand - as.matrix(TypeD[[jj]][,c(2:5)]))/matrix(TypeD[[jj]]$M-1,dim(TypeD[[jj]])[1],4))
Others.Summary <- data.frame(Others.Summary)
colnames(Others.Summary) <- paste("Other.",c("A","Age","Grade","Gender"),sep="")
# Others.Summary$Other.A.Ego.A <- Others.Summary$Other.A*TypeD[[jj]]$A
TypeD[[jj]] <- cbind(TypeD[[jj]][,c(1:5)],Others.Summary,TypeD[[jj]][,c(6:13)])
}
for(jj in 1:2){ TypeD[[jj]] <- TypeD[[jj]][,-c(which(colnames(TypeD[[jj]])=="HH.Loc"),
which(colnames(TypeD[[jj]])=="M"))] }            # Remove Location, M
for(jj in 3:4){ TypeD[[jj]] <- TypeD[[jj]][,-c(which(colnames(TypeD[[jj]])=="HH.Loc"),
which(colnames(TypeD[[jj]])=="M"))] }            # Remove Location, M
for(jj in 5:6){ TypeD[[jj]] <- TypeD[[jj]][,-c(which(colnames(TypeD[[jj]])=="HH.Loc"))] }       # Remove Location
################################
# Propensity Score
################################
Randomization <- read.csv("Clean_Data_SelfAttendance_Randomization.csv")
TypeR <- list()
TypeR[[1]] <- Randomization[Data$M==1&Data$HH.Loc==0,]                   # Size 1 & San Cristobal
TypeR[[2]] <- Randomization[Data$M==1&Data$HH.Loc==1,]                   # Size 1 & Suba
TypeR[[3]] <- Randomization[Data$M==2&Data$HH.Loc==0,]                   # Size 2 & San Cristobal
TypeR[[4]] <- Randomization[Data$M==2&Data$HH.Loc==1,]                   # Size 2 & Suba
TypeR[[5]] <- Randomization[Data$M>=3&Data$HH.Loc==0,]                   # Size>=3& San Cristobal
TypeR[[6]] <- Randomization[Data$M>=3&Data$HH.Loc==1,]                   # Size>=3& Suba
PS <- list()
PS[[1]] <- (TypeR[[1]][,37]/TypeR[[1]][,38])^TypeD[[1]]$A*(1-TypeR[[1]][,37]/TypeR[[1]][,38])^(1-TypeD[[1]]$A)
PS[[2]] <- (TypeR[[2]][,37]/TypeR[[2]][,38])^TypeD[[2]]$A*(1-TypeR[[2]][,37]/TypeR[[2]][,38])^(1-TypeD[[2]]$A)
for(tt in 3:4){
PS[[tt]] <- rep(0,dim(TypeD[[tt]])[1])                         # Propensity score of observing treatment assignment vectors
for(ii in 1:dim(Index[[tt]])[1]){
A.temp <- TypeD[[tt]]$A[Index[[tt]][ii,1]:Index[[tt]][ii,2]]
R.temp <- TypeR[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2],]
if( sum(apply(R.temp,2,sum)[-c(37,38)]>1)==0 ){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- prod( (R.temp[,37]/R.temp[,38])^A.temp*(1-R.temp[,37]/R.temp[,38])^(1-A.temp) )
} else {
if(sum(A.temp)==2){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- (R.temp[1,37]*(R.temp[2,37]-1))/R.temp[1,38]/(R.temp[1,38]-1)
} else if (sum(A.temp)==1){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- (R.temp[1,37]*(R.temp[1,38]-R.temp[2,37]))/R.temp[1,38]/(R.temp[1,38]-1)
} else if (sum(A.temp)==0){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- (R.temp[1,38]-R.temp[1,37])*(R.temp[1,38]-R.temp[2,37]-1)/R.temp[1,38]/(R.temp[1,38]-1)
}
}
}
}
for(tt in 5){
PS[[tt]] <- rep(0,dim(TypeD[[tt]])[1])                         # Propensity score of observing treatment assignment vectors
for(ii in 1:dim(Index[[tt]])[1]){
A.temp <- TypeD[[tt]]$A[Index[[tt]][ii,1]:Index[[tt]][ii,2]]
R.temp <- TypeR[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2],]
if( sum(apply(R.temp,2,sum)[-c(37,38)]>1)==0 ){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- prod( (R.temp[,37]/R.temp[,38])^A.temp*(1-R.temp[,37]/R.temp[,38])^(1-A.temp) )
} else {
pos.2 <- which(R.temp[,which(apply(R.temp,2,sum)[-c(37,38)]==2)]==1)
pos.1 <- (1:length(A.temp))[-pos.2]
p1 <- prod( (R.temp[pos.1,37]/R.temp[pos.1,38])^A.temp[pos.1]*(1-R.temp[pos.1,37]/R.temp[pos.1,38])^(1-A.temp[pos.1]) )
A.temp <- A.temp[pos.2]
R.temp <- R.temp[pos.2,]
if(sum(A.temp)==2){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- p1*(R.temp[1,37]*(R.temp[2,37]-1))/R.temp[1,38]/(R.temp[1,38]-1)
} else if (sum(A.temp)==1){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- p1*(R.temp[1,37]*(R.temp[1,38]-R.temp[2,37]))/R.temp[1,38]/(R.temp[1,38]-1)
} else if (sum(A.temp)==0){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- p1*(R.temp[1,38]-R.temp[1,37])*(R.temp[1,38]-R.temp[2,37]-1)/R.temp[1,38]/(R.temp[1,38]-1)
}
}
}
}
for(tt in 6){
PS[[tt]] <- rep(0,dim(TypeD[[tt]])[1])                         # Propensity score of observing treatment assignment vectors
for(ii in 1:dim(Index[[tt]])[1]){
A.temp <- TypeD[[tt]]$A[Index[[tt]][ii,1]:Index[[tt]][ii,2]]
R.temp <- TypeR[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2],]
if( sum(apply(R.temp,2,sum)[-c(37,38)]>1)==0 ){
PS[[tt]][Index[[tt]][ii,1]:Index[[tt]][ii,2]] <- prod( (R.temp[,37]/R.temp[,38])^A.temp*(1-R.temp[,37]/R.temp[,38])^(1-A.temp) )
} else {
print(c(tt,ii))
}
}
}
